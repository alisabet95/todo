generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id            Int       @id @default(autoincrement())
    username      String?   @unique
    email         String?   @unique
    password      String?
    name          String? // Optional, for Google provider
    image         String? // Optional, for profile picture from Google
    emailVerified DateTime? // Optional, for email verification
    createdAt     DateTime  @default(now())
    accounts      Account[] // Link to OAuth accounts
    sessions      Session[] // Link to sessions
    tasks         Task[] // Your custom relation
    photos        Photo[] // Your custom relation
}

model Account {
    id                Int     @id @default(autoincrement())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Task {
    id        Int     @id @default(autoincrement())
    title     String
    completed Boolean @default(false)
    userId    Int?
    user      User?   @relation(fields: [userId], references: [id])
}

model Photo {
    id         Int      @id @default(autoincrement())
    url        String
    title      String?
    uploadedAt DateTime @default(now())
    userId     Int
    user       User     @relation(fields: [userId], references: [id])
}

model Pros {
    id        Int      @id @default(autoincrement())
    title     String
    createdAt DateTime @default(now())
}
